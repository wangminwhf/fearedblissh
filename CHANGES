3.0.1
------
clean_snapshots:
    - Fixed bug where similarly named pool snapshots were being caught in the parsing.

      Example:
      clean_snapshots -p boot -t zfs

      should only return snapshots from the 'boot' pool such as:

      boot/gentoo

      However, it was also catching things such as:

      backup/boot/gentoo

- Added silencing endings to some entries in the EXAMPLE file so that it doesn't
  spam local mail.

3.0.0
------
zfs_backup:
    Breaking Change.

    - The zfs backup script now keeps the pool name when backing it up to the remote pool.
    Example:

    Dataset to backup: tank/gentoo/root
    Backup Pool: backup

    "tank/gentoo/root" will be stored on "backup/tank/gentoo/root".

    Since this is a breaking change, you will need to 'zfs rename' your old dataset to the new location.
    All snapshots already taken will automatically inherit the new location.

    Due note, for this to work, you need to have created the disjointed part (or container-base part) of the dataset
    at the backup pool.

    If you try to backup: backup/tank/gentoo/root but "tank" doesnt exist, it will fail. It will recursively work downward
    but after it has a safe-existing starting point.

    If you currently have:

    backup/

    and you want to backup: tank/gentoo/root

    then you need to create "tank", and then you can recursively send everything else downward as usual.

    zfs create backup/tank
    zfs_backup -b backup -d tank/gentoo/root

2.6.0
------
clean_snapshots:
    - The cleaner now automatically keeps 1000 snapshots by default regardless of date.
      This is so that if you don't backup for a long period of time, all of your "old" snapshots
      don't get nuked.
    - You can pass the "-m" option to override the minimum amount of snapshots to keep
    - You can pass the "-i" option to ignore the minimum amount of snapshots.

    Example: If you have 1000 snapshots, and you set the minimum to 400, the 1000 snapshots are all
             older than 30 days, the cleaner will remove 600 of them and you will be left with your
             desired 400 minimum.

2.5.2
------
- Fixed a minor bug with the cron example for MONTHLY, which would make
  cron take a MONTHLY snapshot every minute during that MONTHLY date.

2.5.1
------
- Minor visual improvements.

zfs_backup:
- Improved some of the messages so that when a full backup is going to be performed, you know
  which snapshot will be sent beforehand.

tank_backup:
- This script now supports you passing an optional parameter which will act as a "tag" to filter the snapshots
  you want to send.

2.5.0
------
- Fixed 'WEEKLY' example entry in the file so that it doesn't take a snapshot
  for every minute on that day.

- Improved the zfs debug test script

zfs_backup:
  - The zfs incremental backups will now only send the differences between
    the source snapshot and the target snapshot (-i). It will no longer send all of
    the snapshots/changes in between those two snapshots (-I). This signficantly speeds
    up backups, and also reduces IO since less snapshots need to be parsed (only 2).

  - You can now use tags when sends or increments (-l). Normally it will get the latest snapshot
    you have on the source pool and increment the backup pool up to that day. But you might
    want to be a bit more controlled and only backup to the latest snapshot that has a
    specific tag.

    Example:

    Backup up to the latest DAILY snapshot:

    zfs_backup -b backup -d tank/gentoo/root -l DAILY

    Will find the latest snapshot available that also has the "DAILY" tag and use that
    as the snapshot end point for increments or full backups.

  - The backup script will now display what is going to happen before it asks you if
    you want to start the backup.

- Removed 'btrfs' debug scripts and documentation. Will leave the code path there for now
  in case people find use for it in the future. But those code paths are _not_ tested.

2.4.0
------
- Added a 'listsnaps' script that you can use to quickly view your snapshots.
  You can also pass a parameter so that it "greps" the snapshot list with it.

clean_snapshots:
  - Fixed a bug in the snapshot cleaner where snapshots that were an older date
    but had a higher time than the current slice date, would not be deleted.
  - The '-l' flag has been introduced. This allows you to pass a "tag" into the program
    which will serve as an extra filter when deleting snapshots.

    Example:

    clean_snapshots -t zfs -p tank -d 2015-08-08-1500 -l HOURLY

    "Delete any zfs snapshot in the 'tank' pool up to August 8th, 2015 @ 3:00 PM that has the "HOURLY" tag
    in its name.

  - A bit of refactoring was done to the parameter code in order to have a more clean design.

2.3.0
------
- Added tag support in the zfs/tank_snapshot scripts. This allows you to better organize
 your snapshots by adding any tag you want. Something like 'HOURLY', 'DAILY', 'WEEKLY', 'YEARLY.

- Added support for the 'time' section of the snapshots in the cleaner. This allows you to not
  only delete snapshots up to a specific date, but also a specific time.

  Example: Delete all snapshots up to August 5th, 2015 @ 5:00 PM
           clean_snapshots -t zfs -p tank -d 2015-08-05-1700

- Updated the cron list in the EXAMPLEs file so that you can easily set up the
  snapshots tags at the various times during the year.

2.2.2
------
- Fixed main script 'zfs', 'zpool', and 'btrfs' commands to use their full path so that they
  can be used in cronjobs with 'no command not found' errors.

2.2.1
------
- Fixed regression where the btrfs command to delete snapshots became broken.

2.2.0
-------
- Implemented a massive performance improvement to the clean_snapshots for zfs.
  It is now using the comma-delimited feature that the zfs destroy command supports.
  Rather than using the previous implementation of getting each snapshot in the list
  of snapshots to remove and calling zfs destroy on it individually, we are now
  building a list of snapshots for the same dataset that need to be deleted, and passing
  it into one zfs destroy command call. This enables the zfs destroy command to have a better
  perspective of all the snapshots it will remove, and let it remove all of the snapshots
  extremely quickly.

  In order to deal with the ARG_MAX limit that shells/exec have, I've made it so that every 5000
  snapshots, it "flushes" its buffer and trigger the zfs destroy command. 5000 was used because
  for 'bliss-zfs-scripts', the snapshots are named: YYYY-mm-dd-HHMM-ss, + a comma to separate, + let's say
  50 characters for w/e the base dataset name is, 95050~ characters.

  The limit seems to be 2097152 (I did a getconf ARG_MAX on my Gentoo Linux system with bash) and the
  max argument string length seems to be 131072 (at least from what the below website says starting at 2.6.23).

  http://www.in-ulm.de/~mascheck/various/argmax/

  Thus it seems that 5000 seems to be a good safe limit for most usages.

2.1.0
-------
== overall ==
- Changed the date format of the snapshots to be "YYYY-mm-dd-HHMM-ss" rather than "mm_dd_YY". This was done to
  provide extremely fast sorting for the zfs list -t snapshot -s name -o name -H command. This new format should
  also allow one to easily sort with the Linux 'sort -n' utility for both zfs and btrfs filesystem snapshots.

  For existing users, I've provided a 'snapshot_renamer' utility that will allow you to rename all of your current
  snapshots to the new format. This utility can be found in the 'migration' folder.

  * Note, this renamer is only for zfs. No btrfs renamer will be provided.

- Updated documentation, example, etc respectively

== clean_snapshots ==
  > Fixed a bug where if the month was january, then rolling back 30 days would not roll back to the correct year.
  > Removed some unused code

== zfs_backup ==
  > Refactored to improve overall layout and remove DRY (There were multiple functions that did similar things).
  > The backup script is now using "-s" for retrieving snapshots which also increases the retrieval of snapshots to
    near O(1) times (or at least it feels that way :D).
  > Reduced amount of unnecessary output information
  > Fixed a bug where if the dataset to backup wasn't found, the program would still try to run
  > The program will ask you for confirmation before continuing. You can skip the confirmation by passing the "-f" flag.
  > Only one dataset will be allowed to be passed to the script at a time. Use the flags -b <backup pool> -d <dataset> to set locations.

2.0.0
-------
- Relicensed back to the Mozilla Public License 2.0
- Completely restructured the application in order to fully support both the cleaning
  of btrfs and zfs snapshots.
- Merged the 'btrfs' functionality from the bliss-btrfs-scripts into this one
  to have one code base.
- Improved message output
- Fixed a small bug where if you passed the "-h" flag, it wouldn't just show you the -h,
  but still run a small amount of code.
- The speed for which the script will retrieve the zfs snapshots on a system has been vastly increased
  by taking advantage of the "-s" flag for "zfs list".

1.0.3
-------
- Relicensed to Simplified BSD License

1.0.2
-------
- Relicensed back to MPL 2.0

1.0.1
-------
- Relicensed to the GPLv2
- Cleaned up messaging when running the zfs_backup script.
